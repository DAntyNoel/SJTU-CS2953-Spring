Lab8 mmap

基本内容

实现内存映射的功能。在进程中不能使 mmap 的空间造成冲突，因此选择从高位开始保存。
在进程框架图中，它应该正好位于 trapframe 下方。

按照要求定义虚拟内存空间结构体 vma，并在进程中加入预留的 16 个空槽。需要注意的是
修改了 proc 的内容就应该修改 proc 的初始化函数以及回收函数，虽然表面上看并没有
任何影响

接下来是 mmap 和 munmap 的系统调用，以及需要将 mmaptest 加入编译。由于之前完成
类似任务较为久远，如何完成系统调用接口也让我查了好久的文档。

mmap 首先需要检查参数合法性以及权限，参考 man mmap 中预留的函数进行修改。打开文件
映射之后需要注意增加文件引用次数。由于它不能直接申请新页面，而是采用懒加载的方式，故
还要修改 usertrap 来处理读缺页和写缺页错误。

在处理 page fault 的时候调用 vmalazytouch，用于处理真正的 vma 懒加载缺页中断，
函数的实现位于 sysfile 当中，因此在 defs.h 中并没有属于它的位置，我将其放在最下方。

munmap 的实现相对容易，但是需要注意到当文件处于一个页的中间，则那个页的后半部分释放，
但是前半部分不释放，此时该页整体不应该被释放。另外还考虑了中间被“挖洞”的情况，可以不做
考虑因此直接返回错误。在调用 vmaunmap 释放内存页，并在所有页释放完毕之后，关闭对文件
的引用，并完全释放该 vma。由于需要用到 vm.c 中的 walk 方法，因此将其写在其中并额外
包括了库。

改进

涉及到文件系统（即上一次Lab）的内容。较为复杂，暂时未调通。主要难点在于寻找缓存中已有
的文件映射并处理引用次数。能够达到目的但是会在 usertest 中挂掉。可能是调整了大小之后
某些位被覆盖了。回退到了一个能过的版本。